"""
Cleanup and Run - Script de limpieza y ejecuci√≥n
===============================================
Script para limpiar posibles conflictos y ejecutar la aplicaci√≥n.
"""

import os
import sys
import shutil
from pathlib import Path

def cleanup_directories():
    """Limpia y recrea directorios problem√°ticos."""
    base_dir = Path(__file__).parent
    problem_dirs = ['assets', 'logs', 'temp']
    
    print("üßπ Limpiando directorios...")
    
    for dir_name in problem_dirs:
        dir_path = base_dir / dir_name
        
        # Si existe como archivo, eliminarlo
        if dir_path.exists() and not dir_path.is_dir():
            print(f"üóëÔ∏è Eliminando archivo conflictivo: {dir_path}")
            try:
                dir_path.unlink()
            except Exception as e:
                print(f"‚ö†Ô∏è No se pudo eliminar {dir_path}: {e}")
        
        # Si existe como directorio, verificar que est√© bien
        elif dir_path.exists() and dir_path.is_dir():
            print(f"‚úÖ Directorio OK: {dir_path}")
        
        # Crear directorio si no existe
        else:
            try:
                dir_path.mkdir(parents=True, exist_ok=True)
                print(f"üìÅ Directorio creado: {dir_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Error creando {dir_path}: {e}")
    
    # Crear subdirectorios de assets
    assets_dir = base_dir / 'assets'
    if assets_dir.exists():
        for subdir in ['icons', 'styles']:
            subdir_path = assets_dir / subdir
            try:
                subdir_path.mkdir(exist_ok=True)
                print(f"üìÅ Subdirectorio creado: {subdir_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Error creando {subdir_path}: {e}")

def check_files():
    """Verifica que los archivos principales existan."""
    base_dir = Path(__file__).parent
    required_files = [
        'main.py',
        'requirements.txt',
        'src/pdf_analyzer.py',
        'src/ocr_processor.py', 
        'src/pdf_processor.py',
        'src/utils.py',
        'gui/main_window.py',
        'gui/progress_dialog.py',
        'gui/settings_dialog.py'
    ]
    
    print("\nüìã Verificando archivos...")
    missing_files = []
    
    for file_path in required_files:
        full_path = base_dir / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è Faltan {len(missing_files)} archivos. La aplicaci√≥n podr√≠a no funcionar correctamente.")
        return False
    
    print("\n‚úÖ Todos los archivos principales est√°n presentes")
    return True

def create_init_files():
    """Crea archivos __init__.py faltantes."""
    base_dir = Path(__file__).parent
    init_dirs = ['src', 'gui']
    
    print("\nüìù Creando archivos __init__.py...")
    
    for dir_name in init_dirs:
        init_file = base_dir / dir_name / '__init__.py'
        if not init_file.exists():
            try:
                init_file.parent.mkdir(exist_ok=True)
                init_file.write_text(f'# {dir_name} module\n', encoding='utf-8')
                print(f"üìù Creado: {init_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è Error creando {init_file}: {e}")
        else:
            print(f"‚úÖ Existe: {init_file}")

def main():
    """Funci√≥n principal del script de limpieza."""
    print("üõ†Ô∏è PDF OCR Processor - Script de Limpieza y Verificaci√≥n")
    print("=" * 60)
    
    # Limpiar directorios
    cleanup_directories()
    
    # Crear archivos __init__.py
    create_init_files()
    
    # Verificar archivos
    files_ok = check_files()
    
    print("\n" + "=" * 60)
    
    if files_ok:
        print("‚úÖ Sistema listo para ejecutar")
        
        # Preguntar si ejecutar la aplicaci√≥n
        response = input("\n¬øEjecutar la aplicaci√≥n ahora? (s/n): ").lower().strip()
        
        if response in ['s', 'si', 's√≠', 'y', 'yes']:
            print("\nüöÄ Ejecutando aplicaci√≥n...")
            try:
                # Ejecutar main.py
                import subprocess
                result = subprocess.run([sys.executable, 'main.py'], cwd=Path(__file__).parent)
                sys.exit(result.returncode)
            except Exception as e:
                print(f"‚ùå Error al ejecutar: {e}")
                print("üí° Intenta ejecutar manualmente: python main.py")
        else:
            print("üëç Limpieza completada. Ejecuta: python main.py")
    else:
        print("‚ùå Sistema no est√° completo. Verifica los archivos faltantes.")
        input("\nPresiona Enter para salir...")
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Operaci√≥n cancelada por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        input("Presiona Enter para salir...")
        sys.exit(1)